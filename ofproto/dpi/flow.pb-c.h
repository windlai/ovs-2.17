/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: flow.proto */

#ifndef PROTOBUF_C_flow_2eproto__INCLUDED
#define PROTOBUF_C_flow_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Flowpb__FlowMessage Flowpb__FlowMessage;


/* --- enums --- */

typedef enum _Flowpb__FlowMessage__FlowType {
  FLOWPB__FLOW_MESSAGE__FLOW_TYPE__FLOWUNKNOWN = 0,
  FLOWPB__FLOW_MESSAGE__FLOW_TYPE__SFLOW_5 = 1,
  FLOWPB__FLOW_MESSAGE__FLOW_TYPE__NETFLOW_V5 = 2,
  FLOWPB__FLOW_MESSAGE__FLOW_TYPE__NETFLOW_V9 = 3,
  FLOWPB__FLOW_MESSAGE__FLOW_TYPE__IPFIX = 4,
  FLOWPB__FLOW_MESSAGE__FLOW_TYPE__NDPI = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FLOWPB__FLOW_MESSAGE__FLOW_TYPE)
} Flowpb__FlowMessage__FlowType;

/* --- messages --- */

struct  Flowpb__FlowMessage
{
  ProtobufCMessage base;
  Flowpb__FlowMessage__FlowType type;
  uint64_t time_received_ns;
  uint32_t sequence_num;
  uint64_t sampling_rate;
  /*
   * Sampler information
   */
  ProtobufCBinaryData sampler_address;
  /*
   * Found inside packet
   */
  uint64_t time_flow_start_ns;
  uint64_t time_flow_end_ns;
  /*
   * Size of the sampled packet
   */
  uint64_t bytes;
  uint64_t packets;
  /*
   * Source/destination addresses
   */
  ProtobufCBinaryData src_addr;
  ProtobufCBinaryData dst_addr;
  /*
   * Layer 3 protocol (IPv4/IPv6/ARP/MPLS...)
   */
  uint32_t etype;
  /*
   * Layer 4 protocol
   */
  uint32_t proto;
  /*
   * Ports for UDP and TCP
   */
  uint32_t src_port;
  uint32_t dst_port;
  /*
   * Interfaces
   */
  uint32_t in_if;
  uint32_t out_if;
  /*
   * Ethernet information
   */
  uint64_t src_mac;
  uint64_t dst_mac;
  /*
   * Vlan
   */
  uint32_t src_vlan;
  uint32_t dst_vlan;
  /*
   * 802.1q VLAN in sampled packet
   */
  uint32_t vlan_id;
  /*
   * IP and TCP special flags
   */
  uint32_t ip_tos;
  uint32_t forwarding_status;
  uint32_t ip_ttl;
  uint32_t ip_flags;
  uint32_t tcp_flags;
  uint32_t icmp_type;
  uint32_t icmp_code;
  uint32_t ipv6_flow_label;
  /*
   * Fragments (IPv4/IPv6)
   */
  uint32_t fragment_id;
  uint32_t fragment_offset;
  /*
   * vnid from VXLAN or GENEVE
   */
  uint32_t vnid;
  /*
   * Inner Source/destination addresses
   */
  ProtobufCBinaryData in_src_addr;
  ProtobufCBinaryData in_dst_addr;
  /*
   * Ports for inner UDP and TCP
   */
  uint32_t in_src_port;
  uint32_t in_dst_port;
  /*
   * Layer 4 protocol for inner header
   */
  uint32_t in_proto;
  /*
   * Autonomous system information
   */
  uint32_t src_as;
  uint32_t dst_as;
  ProtobufCBinaryData next_hop;
  uint32_t next_hop_as;
  /*
   * Prefix size
   */
  uint32_t src_net;
  uint32_t dst_net;
  /*
   * BGP information
   */
  ProtobufCBinaryData bgp_next_hop;
  size_t n_bgp_communities;
  uint32_t *bgp_communities;
  size_t n_as_path;
  uint32_t *as_path;
  /*
   * MPLS information
   */
  size_t n_mpls_ttl;
  uint32_t *mpls_ttl;
  size_t n_mpls_label;
  uint32_t *mpls_label;
  size_t n_mpls_ip;
  ProtobufCBinaryData *mpls_ip;
  uint32_t observation_domain_id;
  uint32_t observation_point_id;
  /*
   * Layer 7 protocol
   */
  ProtobufCBinaryData app_proto;
};
#define FLOWPB__FLOW_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&flowpb__flow_message__descriptor) \
    , FLOWPB__FLOW_MESSAGE__FLOW_TYPE__FLOWUNKNOWN, 0, 0, 0, {0,NULL}, 0, 0, 0, 0, {0,NULL}, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, {0,NULL}, 0, 0, 0, 0, 0, {0,NULL}, 0, 0, 0, {0,NULL}, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0, {0,NULL} }


/* Flowpb__FlowMessage methods */
void   flowpb__flow_message__init
                     (Flowpb__FlowMessage         *message);
size_t flowpb__flow_message__get_packed_size
                     (const Flowpb__FlowMessage   *message);
size_t flowpb__flow_message__pack
                     (const Flowpb__FlowMessage   *message,
                      uint8_t             *out);
size_t flowpb__flow_message__pack_to_buffer
                     (const Flowpb__FlowMessage   *message,
                      ProtobufCBuffer     *buffer);
Flowpb__FlowMessage *
       flowpb__flow_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   flowpb__flow_message__free_unpacked
                     (Flowpb__FlowMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Flowpb__FlowMessage_Closure)
                 (const Flowpb__FlowMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor flowpb__flow_message__descriptor;
extern const ProtobufCEnumDescriptor    flowpb__flow_message__flow_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_flow_2eproto__INCLUDED */
